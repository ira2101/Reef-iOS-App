//
//  ReefUser.swift
//  Reef
//
//  Created by Ira Einbinder on 1/24/22.
//

import Foundation
import RealmSwift

/*
 So right now in Reef, _id is different than userId.
 userId refers to the id generated by MongoDB for app.currentUser
 _id is different
 */

class ReefUser : Object {
    @Persisted(primaryKey: true) var _id : ObjectId;
    @Persisted var userId : ObjectId = ObjectId.generate();
    @Persisted var fullName : String = "";
    @Persisted var email : String = "";
    @Persisted var age : Int = 0;
    @Persisted var reefLevel: Int = 1
    @Persisted var dateAdded: Date = Date.now
    
    convenience init(userId : ObjectId, fullName : String, email : String, age : Int) {
        self.init()
        self._id = userId
        self.userId = userId
        self.fullName = fullName
        self.email = email
        self.age = age
    }
    
    static func follow(reefQuestion: ReefQuestion) async throws {
        let app = App(id: Constants.REALM_APP_ID)
        let user = app.currentUser!
                
        let reefFollowing = ReefFollowing(followingId: reefQuestion._id, userId: try! ObjectId(string: user.id))
        try await ReefIO.writeToDatabase(objs: [reefFollowing], partition: user.id)
    }
    
    static func isFollowing(reefQuestion: ReefQuestion) async throws -> Bool {
        let app = App(id: Constants.REALM_APP_ID)
        let user = app.currentUser!
        let realm = try await Realm(configuration: user.configuration(partitionValue: user.id))
        
        let results = realm.objects(ReefFollowing.self).where {
            $0.followingId == reefQuestion._id
        }
        
        return results.count > 0
    }
    
    static func unfollow(reefQuestion: ReefQuestion) async throws {
        let app = App(id: Constants.REALM_APP_ID)
        let user = app.currentUser!
        let realm = try await Realm(configuration: user.configuration(partitionValue: user.id))
        
        let results = realm.objects(ReefFollowing.self).where {
            $0.followingId == reefQuestion._id
        }
        
        if !results.isEmpty {
            try await ReefIO.deleteFromDatabase(objs: Array(results), partition: user.id)
        }
    }
    
    /// Returns: the number of people who have agreed with this user
    static func numberOfAgrees() async throws -> Int {
        let app = App(id: Constants.REALM_APP_ID)
        let user = app.currentUser!
        let userRealm = try await Realm(configuration: user.configuration(partitionValue: Constants.GLOBAL_PARTITION))
        
        let results = userRealm.objects(ReefInteraction.self).where {
            $0.interactionType == "AGREE" && $0.interactedWithUserID == (try! ObjectId(string: user.id))
        }
        
        return results.count
    }
    
    /// Returns: the number of people who have disagreed with this user
    static func numberOfDisagrees() async throws -> Int {
        let app = App(id: Constants.REALM_APP_ID)
        let user = app.currentUser!
        let userRealm = try await Realm(configuration: user.configuration(partitionValue: Constants.GLOBAL_PARTITION))
        
        let results = userRealm.objects(ReefInteraction.self).where {
            $0.interactionType == "DISAGREE" && $0.interactedWithUserID == (try! ObjectId(string: user.id))
        }
        
        return results.count
    }
    
    static func getReefLevel() async throws -> Int {
        let app = App(id: Constants.REALM_APP_ID)
        let user = app.currentUser!
        let globalRealm = try await Realm(configuration: user.configuration(partitionValue: Constants.GLOBAL_PARTITION))
        
        let reefUser = globalRealm.objects(ReefUser.self).first {
            $0.userId == (try! ObjectId(string: user.id))
        }
        
        return reefUser?.reefLevel ?? 1
    }
    
    static func getReefScore() async throws -> Int {
        let app = App(id: Constants.REALM_APP_ID)
        let user = app.currentUser!
        let globalRealm = try await Realm(configuration: user.configuration(partitionValue: Constants.GLOBAL_PARTITION))
        
        let reefInteraction = globalRealm.objects(ReefInteraction.self)
        let upvotes = reefInteraction.where {
            $0.interactionType == "AGREE"
        }.count
        let downvotes = reefInteraction.where {
            $0.interactionType == "DISAGREE"
        }.count
        let neutralvotes = reefInteraction.where {
            $0.interactionType == "NEUTRAL"
        }.count
        
        let totalxp = Double(upvotes) + Double(neutralvotes) * 0.2 - Double(downvotes) * 0.5;
        return Int(totalxp)
    }
    
    static func scoreForNextLevel() async throws -> Int {
        do {
            let reefLevel =  try await getReefLevel()
            return Int(pow(10.0, Double(reefLevel + 2)))
        } catch {
            print(error.localizedDescription)
        }
        
        return -1
    }
        
    static func interaction(with bubble: ReefBubble) -> ReefInteraction? {
        let app = App(id: Constants.REALM_APP_ID)
        guard let user = app.currentUser else {
            return nil
        }
        
        do {
            let realm = try Realm(configuration: user.configuration(partitionValue: Constants.GLOBAL_PARTITION))
            let result = realm.objects(ReefInteraction.self).where {
                $0.userID == (try! ObjectId(string: user.id)) && $0.interactedWithBubble == bubble._id
            }
            .first
            
            return result
        } catch {
            print(error.localizedDescription)
        }
        
        return nil
    }
    
    
}
